// <auto-generated />
using System;
using Access.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Access.Infrastructure.Migrations
{
    [DbContext(typeof(ColiZenDbContext))]
    [Migration("20250217121538_test")]
    partial class test
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Access.AppCore.Entities.Banque", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Intitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActif")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("isActif");

                    b.HasKey("Id");

                    b.ToTable("Banques", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.Cheque", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BanqueId")
                        .HasColumnType("int");

                    b.Property<int>("ChequeStatutId")
                        .HasColumnType("int");

                    b.Property<int>("ChequierId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActif")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("isActif");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("BanqueId");

                    b.HasIndex("ChequeStatutId");

                    b.HasIndex("ChequierId");

                    b.ToTable("Cheques", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.ChequeStatut", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Intitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ChequeStatuts", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.Chequier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BanqueId")
                        .HasColumnType("int");

                    b.Property<int>("ChequierStatutId")
                        .HasColumnType("int");

                    b.Property<string>("ChequierStatutIntitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActif")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("isActif");

                    b.Property<string>("NumeroDebut")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NumeroFin")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("BanqueId");

                    b.HasIndex("ChequierStatutId");

                    b.ToTable("Chequiers", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.ChequierStatut", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Intitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ChequierStatuts", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.Cite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("GouvernoratId")
                        .HasColumnType("int");

                    b.Property<string>("GouvernoratIntitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Intitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("VilleId")
                        .HasColumnType("int");

                    b.Property<string>("VilleIntitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("GouvernoratId");

                    b.HasIndex("VilleId");

                    b.ToTable("Cites", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abreviation")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AdresseMail")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Classe")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("C");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("ClientTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ClientTypeIntitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("ClientWarehouseId")
                        .HasColumnType("int");

                    b.Property<string>("ClientWarehouseIntitule")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CodePostal")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("CollaborateurId")
                        .HasColumnType("int");

                    b.Property<string>("CollaborateurName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreationLe")
                        .HasColumnType("datetime");

                    b.Property<string>("CreationPar")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateOnly?>("DateFinContrat")
                        .HasColumnType("date");

                    b.Property<int>("FacturationCategorieId")
                        .HasColumnType("int");

                    b.Property<string>("FacturationCategorieIntitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Gouvernorat")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Intitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActif")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("isActif");

                    b.Property<bool>("IsAssujettiTpf")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("isAssujettiTpf");

                    b.Property<bool>("IsAssujettiTva")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("isAssujettiTva");

                    b.Property<bool>("IsFacture")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("isFacture");

                    b.Property<bool>("IsGenerationBonLivraison")
                        .HasColumnType("bit")
                        .HasColumnName("isGenerationBonLivraison");

                    b.Property<bool>("IsInterne")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStatFacturation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("isStatFacturation");

                    b.Property<bool>("IsStatPayout")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("isStatPayout");

                    b.Property<string>("MatriculeFiscaleCin")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ModeReglementFacturationId")
                        .HasColumnType("int");

                    b.Property<string>("ModeReglementFacturationIntitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ModeReglementPaimentId")
                        .HasColumnType("int");

                    b.Property<string>("ModeReglementPaimentIntitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("ModificationLe")
                        .HasColumnType("datetime");

                    b.Property<string>("ModificationPar")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NomCommercial")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NomPremierResponsable")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("NombreJoursPaiement")
                        .HasColumnType("int");

                    b.Property<int>("NombreTentativeLivraison")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("ServiceInitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK_Client");

                    b.HasIndex("ClientId");

                    b.HasIndex("ClientTypeId");

                    b.HasIndex("ClientWarehouseId");

                    b.HasIndex("CollaborateurId");

                    b.HasIndex("FacturationCategorieId");

                    b.HasIndex("ModeReglementFacturationId");

                    b.HasIndex("ModeReglementPaimentId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Clients", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.ClientContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdresseMail")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Fonction")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NomComplet")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Note")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Telephone")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK_ClientContact");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientContacts", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.ClientType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Intitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActif")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("isActif");

                    b.HasKey("Id");

                    b.ToTable("ClientTypes", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.ClientWarehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CiteId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("GouvernoratId")
                        .HasColumnType("int");

                    b.Property<string>("Intitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("VilleId")
                        .HasColumnType("int");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ClientWarehouses", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.Collaborateur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AdresseMail")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("AgenceId")
                        .HasColumnType("int");

                    b.Property<string>("AgenceIntitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Cin")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CodePostal")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreationLe")
                        .HasColumnType("datetime");

                    b.Property<string>("CreationPar")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Fonction")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Gouvernorat")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActif")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("isActif");

                    b.Property<bool>("IsExterne")
                        .HasColumnType("bit")
                        .HasColumnName("isExterne");

                    b.Property<DateTime?>("ModificationLe")
                        .HasColumnType("datetime");

                    b.Property<string>("ModificationPar")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NomComplet")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("RoleIntitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK_Collaborateur");

                    b.HasIndex("AgenceId");

                    b.HasIndex("RoleId");

                    b.ToTable("Collaborateurs", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.CollaborateurRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Intitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CollaborateurRoles", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.CommandeCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Intitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActif")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("isActif");

                    b.HasKey("Id")
                        .HasName("PK_ColisCategories");

                    b.ToTable("CommandeCategories", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.CommandeEtape", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("CommandeStautId")
                        .HasColumnType("int");

                    b.Property<string>("CommandeStautIntitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Intitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsAfficheClient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("isAfficheClient");

                    b.HasKey("Id")
                        .HasName("PK_CommandeEtape");

                    b.ToTable("CommandeEtapes", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.CommandeStatut", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Intitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CommandeStatuts", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.Console", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CollaborateurId")
                        .HasColumnType("int");

                    b.Property<int>("ConsoleStatutId")
                        .HasColumnType("int");

                    b.Property<string>("ConsoleStatutIntitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreationLe")
                        .HasColumnType("datetime");

                    b.Property<string>("CreationPar")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ModificationLe")
                        .HasColumnType("datetime");

                    b.Property<string>("ModificationPar")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("SocieteAgenceDestinationId")
                        .HasColumnType("int");

                    b.Property<string>("SocieteAgenceDestinationIntitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("SocieteAgenceSourceId")
                        .HasColumnType("int");

                    b.Property<string>("SocieteAgenceSourceIntitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("VehiculeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Consoles", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.ConsoleStatut", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Intitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ConsoleStatuts", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.EmballageArticle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Intitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActif")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("isActif");

                    b.HasKey("Id");

                    b.ToTable("EmballageArticles", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.EmballageCommandeStaut", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Intitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("EmballageCommandeStauts", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.FacturationCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Intitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActif")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("isActif");

                    b.HasKey("Id");

                    b.ToTable("FacturationCategories", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.Facture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationLe")
                        .HasColumnType("datetime");

                    b.Property<string>("CreationPar")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("FactureStatutId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationLe")
                        .HasColumnType("datetime");

                    b.Property<string>("ModificationPar")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("MontantHt")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal>("MontantTpf")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal>("MontantTtc")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal>("MontantTva")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Factures", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.FactureLigne", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FactureArticleId")
                        .HasColumnType("int");

                    b.Property<string>("FactureArticleIntitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("FactureArticlePuHt")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<decimal>("FactureArticlePuTtc")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<int>("FactureId")
                        .HasColumnType("int");

                    b.Property<decimal>("MontantHt")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<decimal>("MontantTtc")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<decimal>("MontantTva")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<int>("Quantite")
                        .HasColumnType("int");

                    b.Property<int>("TaxeId")
                        .HasColumnType("int");

                    b.Property<decimal>("TaxeTaux")
                        .HasColumnType("decimal(18, 3)");

                    b.HasKey("Id");

                    b.ToTable("FactureLignes", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.FormulaireSatisfaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationLe")
                        .HasColumnType("datetime");

                    b.Property<string>("CreationPar")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Intitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActif")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("isActif");

                    b.Property<int>("NombreParticipants")
                        .HasColumnType("int");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("FormulaireSatisfaction", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.FormulaireSatisfactionQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FormulaireSatisfactionId")
                        .HasColumnType("int");

                    b.Property<int>("FormulaireSatisfactionQuestionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FormulaireSatisfactionQuestions", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.FormulaireSatisfactionQuestionsType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Intitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("FormulaireSatisfactionQuestionsTypes", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.FormulaireSatisfactionReponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("FormulaireSatisfactionId")
                        .HasColumnType("int");

                    b.Property<string>("FormulaireSatisfactionQuestion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FormulaireSatisfactionQuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Reponse")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FormulaireSatisfactionReponses", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.Gouvernorat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Intitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Gouvernorats", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.Inventaire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreationLe")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CreationPar")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("InventaireStatutId")
                        .HasColumnType("int");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("SocieteAgenceId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_InventaireStatuts");

                    b.ToTable("Inventaires", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.InventaireResultat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CommandeId")
                        .HasColumnType("int");

                    b.Property<int>("CommandeNombrePiece")
                        .HasColumnType("int");

                    b.Property<string>("CommandeNumero")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Ecart")
                        .HasColumnType("int");

                    b.Property<int>("InventaireId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("InventaireResultat", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.InventaireScan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CollaborateurId")
                        .HasColumnType("int");

                    b.Property<int>("CommandeId")
                        .HasColumnType("int");

                    b.Property<int>("CommandeNombrePiece")
                        .HasColumnType("int");

                    b.Property<string>("CommandeNumero")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("DateScan")
                        .HasColumnType("datetime");

                    b.Property<int>("InventaireId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("InventaireScan", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.InventaireStatut", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Intitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK_InventaireStatutss");

                    b.ToTable("InventaireStatuts", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.InventaireStockTheorique", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CommandeId")
                        .HasColumnType("int");

                    b.Property<int>("CommandeNombrePiece")
                        .HasColumnType("int");

                    b.Property<string>("CommandeNumero")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("InventaireId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("InventaireStockTheorique", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.LogModificationStatutCommande", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CommandeId")
                        .HasColumnType("int");

                    b.Property<string>("CommandeNumero")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("CommandeStatutActuelId")
                        .HasColumnType("int");

                    b.Property<string>("CommandeStatutActuelIntitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("CommandeStatutModifierId")
                        .HasColumnType("int");

                    b.Property<string>("CommandeStatutModifierIntitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("ModificationLe")
                        .HasColumnType("datetime");

                    b.Property<string>("ModificationPar")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("LogModificationStatutCommande", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.ModesReglement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Intitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActif")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("isActif");

                    b.HasKey("Id");

                    b.ToTable("ModesReglement", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.ModesReglementFacturation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Intitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActif")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("isActif");

                    b.HasKey("Id");

                    b.ToTable("ModesReglementFacturation", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.ModesReglementPaiement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Intitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActif")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("isActif");

                    b.HasKey("Id")
                        .HasName("PK_ModesReglementPayout");

                    b.ToTable("ModesReglementPaiement", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.MotifsCallCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Intitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActif")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("isActif");

                    b.HasKey("Id");

                    b.ToTable("MotifsCallCenter", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.MotifsLivraison", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Intitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActif")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("isActif");

                    b.Property<bool>("IsRetry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("isRetry");

                    b.HasKey("Id");

                    b.ToTable("MotifsLivraison", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.MotifsPickup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Intitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActif")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("isActif");

                    b.HasKey("Id");

                    b.ToTable("MotifsPickup", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.Paiement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BanqueId")
                        .HasColumnType("int");

                    b.Property<string>("BanqueIntitule")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("ChequeId")
                        .HasColumnType("int");

                    b.Property<string>("ChequeNumero")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("ChequierId")
                        .HasColumnType("int");

                    b.Property<string>("ClientCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("ClientIntitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ClientRib")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Commentaire")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationLe")
                        .HasColumnType("datetime");

                    b.Property<string>("CreationPar")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("ModeReglementPaiementId")
                        .HasColumnType("int");

                    b.Property<string>("ModeReglementPaiementIntitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("ModificationLe")
                        .HasColumnType("datetime");

                    b.Property<string>("ModificationPar")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Montant")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<int>("NombreCommande")
                        .HasColumnType("int");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NumeroTransaction")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("PaiementStatutId")
                        .HasColumnType("int");

                    b.Property<string>("PaiementStatutIntitule")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Paiements", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.PaiementDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CommandeId")
                        .HasColumnType("int");

                    b.Property<string>("CommandeNumero")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Montant")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<int>("PaiementId")
                        .HasColumnType("int");

                    b.Property<string>("PaiementNumero")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("PaiementDetails", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.Prospect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abreviation")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AdresseMail")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CodePostal")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreationLe")
                        .HasColumnType("datetime");

                    b.Property<string>("CreationPar")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Gouvernorat")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Intitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MatriculeFiscaleCin")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NomCommercial")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NomPremierResponsable")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Prospects", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.Reclamation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("ClientIntitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("CollaborateurId")
                        .HasColumnType("int");

                    b.Property<string>("CommandeNumero")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreationLe")
                        .HasColumnType("datetime");

                    b.Property<string>("CreationPar")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<bool>("IsCloture")
                        .HasColumnType("bit")
                        .HasColumnName("isCloture");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModificationLe")
                        .HasColumnType("datetime");

                    b.Property<string>("ModificationPar")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ReclamationPrioriteId")
                        .HasColumnType("int");

                    b.Property<string>("ReclamationPrioriteIntitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ReclamationStatutId")
                        .HasColumnType("int");

                    b.Property<string>("ReclamationStatutIntitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ReclamationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ReclamationTypeIntitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("SocieteDepartementId")
                        .HasColumnType("int");

                    b.Property<string>("SocieteDepartementIntitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Reclamations", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.ReclamationCommentaire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CollaborateurId")
                        .HasColumnType("int");

                    b.Property<string>("CreationLe")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreationPar")
                        .HasColumnType("datetime");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ReclamationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ReclamationCommentaires", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.ReclamationPriorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Couleur")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Intitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActif")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("isActif");

                    b.HasKey("Id")
                        .HasName("PK_Table_3");

                    b.ToTable("ReclamationPriorites", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.ReclamationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Intitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActif")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("isActif");

                    b.Property<int>("SocieteDepartementId")
                        .HasColumnType("int");

                    b.Property<string>("SocieteDepartementIntitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ReclamationTypes", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Intitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActif")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("isActif");

                    b.HasKey("Id");

                    b.ToTable("Services", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.Societe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Activite")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AdresseMail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CodePostal")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Gouvernorat")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MatriculeFiscale")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NomCommercial")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PremierResponsable")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RaisonSocial")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RegistreCommerce")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Secteur")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Societe", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activite = "Livraison",
                            Adresse = "Lac2",
                            AdresseMail = "KoliZen@mail.com",
                            CodePostal = "2025",
                            Gouvernorat = "Tunis",
                            MatriculeFiscale = "0000000/A/A/A/000",
                            NomCommercial = "KoliZen",
                            PremierResponsable = "Fedi",
                            RaisonSocial = "bb",
                            RegistreCommerce = "L/05/500/m",
                            Secteur = "Livraison",
                            Telephone = "00000000",
                            Ville = "Tunis"
                        });
                });

            modelBuilder.Entity("Access.AppCore.Entities.SocieteAgence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AdresseMail")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CodePostal")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("CollaborateurId")
                        .HasColumnType("int");

                    b.Property<string>("CollaborateurName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Gouvernorat")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Intitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActif")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("isActif");

                    b.Property<string>("MatriculeFiscale")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CollaborateurId");

                    b.ToTable("SocieteAgences", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.SocieteDepartement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CollaborateurId")
                        .HasColumnType("int");

                    b.Property<string>("Intitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActif")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("isActif");

                    b.HasKey("Id")
                        .HasName("PK_Departements");

                    b.HasIndex("CollaborateurId");

                    b.ToTable("SocieteDepartements", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.Taxe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Intitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActif")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("isActif");

                    b.Property<int>("TaxeTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Valeur")
                        .HasColumnType("decimal(18, 3)");

                    b.HasKey("Id")
                        .HasName("PK_Taxes");

                    b.HasIndex("TaxeTypeId");

                    b.ToTable("Taxes", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.TaxeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Intitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("TaxeTypes", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.Vehicule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationLe")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CreationPar")
                        .HasColumnType("datetime");

                    b.Property<DateOnly?>("DateDernierVidange")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("DateDerniereVisite")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("DateVignette")
                        .HasColumnType("date");

                    b.Property<bool>("IsActif")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("isActif");

                    b.Property<bool>("IsGps")
                        .HasColumnType("bit")
                        .HasColumnName("isGPS");

                    b.Property<int>("Kilometrage")
                        .HasColumnType("int");

                    b.Property<string>("Marque")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Matricule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Modele")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ModificationLe")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ModificationPar")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("PoidsMaximal")
                        .HasColumnType("int");

                    b.Property<int>("VehiculeTypeId")
                        .HasColumnType("int");

                    b.Property<string>("VehiculeTypeIntitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Vehicules", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.VehiculeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Intitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("VehiculeTypes", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.Ville", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("GouvernoratId")
                        .HasColumnType("int");

                    b.Property<string>("GouvernoratIntitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Intitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("GouvernoratId");

                    b.ToTable("Villes", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.Zone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Intitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Zones", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.ZoneVille", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CiteId")
                        .HasColumnType("int");

                    b.Property<int>("GouvernoratId")
                        .HasColumnType("int");

                    b.Property<int>("VilleId")
                        .HasColumnType("int");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CiteId");

                    b.HasIndex("GouvernoratId");

                    b.HasIndex("VilleId");

                    b.HasIndex("ZoneId");

                    b.ToTable("ZoneVilles", (string)null);
                });

            modelBuilder.Entity("Access.AppCore.Entities.Cheque", b =>
                {
                    b.HasOne("Access.AppCore.Entities.Banque", "Banque")
                        .WithMany("Cheques")
                        .HasForeignKey("BanqueId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Cheques_Banques");

                    b.HasOne("Access.AppCore.Entities.ChequeStatut", "ChequeStatut")
                        .WithMany("Cheques")
                        .HasForeignKey("ChequeStatutId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Cheques_ChequeStatuts");

                    b.HasOne("Access.AppCore.Entities.Chequier", "Chequier")
                        .WithMany("Cheques")
                        .HasForeignKey("ChequierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Cheques_Chequiers");

                    b.Navigation("Banque");

                    b.Navigation("ChequeStatut");

                    b.Navigation("Chequier");
                });

            modelBuilder.Entity("Access.AppCore.Entities.Chequier", b =>
                {
                    b.HasOne("Access.AppCore.Entities.Banque", "Banque")
                        .WithMany("Chequiers")
                        .HasForeignKey("BanqueId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Chequiers_Banques");

                    b.HasOne("Access.AppCore.Entities.ChequierStatut", "ChequierStatut")
                        .WithMany("Chequiers")
                        .HasForeignKey("ChequierStatutId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Chequiers_ChequierStatuts");

                    b.Navigation("Banque");

                    b.Navigation("ChequierStatut");
                });

            modelBuilder.Entity("Access.AppCore.Entities.Cite", b =>
                {
                    b.HasOne("Access.AppCore.Entities.Gouvernorat", "Gouvernorat")
                        .WithMany("Cites")
                        .HasForeignKey("GouvernoratId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Cites_Gouvernorats");

                    b.HasOne("Access.AppCore.Entities.Ville", "Ville")
                        .WithMany("Cites")
                        .HasForeignKey("VilleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Cites_Villes");

                    b.Navigation("Gouvernorat");

                    b.Navigation("Ville");
                });

            modelBuilder.Entity("Access.AppCore.Entities.Client", b =>
                {
                    b.HasOne("Access.AppCore.Entities.Client", "ClientInfo")
                        .WithMany("Clients")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Clients_Clients");

                    b.HasOne("Access.AppCore.Entities.ClientType", "ClientType")
                        .WithMany("Clients")
                        .HasForeignKey("ClientTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Clients_ClientTypes");

                    b.HasOne("Access.AppCore.Entities.ClientWarehouse", "ClientWarehouse")
                        .WithMany("Clients")
                        .HasForeignKey("ClientWarehouseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Clients_ClientWarehouses");

                    b.HasOne("Access.AppCore.Entities.Collaborateur", "Collaborateur")
                        .WithMany("Clients")
                        .HasForeignKey("CollaborateurId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Clients_Collaborateurs");

                    b.HasOne("Access.AppCore.Entities.FacturationCategory", "FacturationCategorie")
                        .WithMany("Clients")
                        .HasForeignKey("FacturationCategorieId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Clients_FacturationCategories");

                    b.HasOne("Access.AppCore.Entities.ModesReglementFacturation", "ModeReglementFacturation")
                        .WithMany("Clients")
                        .HasForeignKey("ModeReglementFacturationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Clients_ModesReglementFacturation");

                    b.HasOne("Access.AppCore.Entities.ModesReglementPaiement", "ModeReglementPaiment")
                        .WithMany("Clients")
                        .HasForeignKey("ModeReglementPaimentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Clients_ModesReglementPaiement");

                    b.HasOne("Access.AppCore.Entities.Service", "Service")
                        .WithMany("Clients")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Clients_Services");

                    b.Navigation("ClientInfo");

                    b.Navigation("ClientType");

                    b.Navigation("ClientWarehouse");

                    b.Navigation("Collaborateur");

                    b.Navigation("FacturationCategorie");

                    b.Navigation("ModeReglementFacturation");

                    b.Navigation("ModeReglementPaiment");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Access.AppCore.Entities.ClientContact", b =>
                {
                    b.HasOne("Access.AppCore.Entities.Client", "Client")
                        .WithMany("ClientContacts")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_ClientContacts_Clients");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Access.AppCore.Entities.Collaborateur", b =>
                {
                    b.HasOne("Access.AppCore.Entities.SocieteAgence", "Agence")
                        .WithMany("Collaborateurs")
                        .HasForeignKey("AgenceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Collaborateurs_SocieteAgences");

                    b.HasOne("Access.AppCore.Entities.CollaborateurRole", "Role")
                        .WithMany("Collaborateurs")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Collaborateurs_CollaborateurRoles");

                    b.Navigation("Agence");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Access.AppCore.Entities.SocieteAgence", b =>
                {
                    b.HasOne("Access.AppCore.Entities.Collaborateur", "Collaborateur")
                        .WithMany("SocieteAgences")
                        .HasForeignKey("CollaborateurId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_SocieteAgences_Collaborateurs");

                    b.Navigation("Collaborateur");
                });

            modelBuilder.Entity("Access.AppCore.Entities.SocieteDepartement", b =>
                {
                    b.HasOne("Access.AppCore.Entities.Collaborateur", "Collaborateur")
                        .WithMany("SocieteDepartements")
                        .HasForeignKey("CollaborateurId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_SocieteDepartements_Collaborateurs");

                    b.Navigation("Collaborateur");
                });

            modelBuilder.Entity("Access.AppCore.Entities.Taxe", b =>
                {
                    b.HasOne("Access.AppCore.Entities.TaxeType", "TaxeType")
                        .WithMany("Taxes")
                        .HasForeignKey("TaxeTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Taxes_Taxes");

                    b.Navigation("TaxeType");
                });

            modelBuilder.Entity("Access.AppCore.Entities.Ville", b =>
                {
                    b.HasOne("Access.AppCore.Entities.Gouvernorat", "Gouvernorat")
                        .WithMany("Villes")
                        .HasForeignKey("GouvernoratId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Villes_Gouvernorats");

                    b.Navigation("Gouvernorat");
                });

            modelBuilder.Entity("Access.AppCore.Entities.ZoneVille", b =>
                {
                    b.HasOne("Access.AppCore.Entities.Cite", "Cite")
                        .WithMany("ZoneVilles")
                        .HasForeignKey("CiteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_ZoneVilles_Cites");

                    b.HasOne("Access.AppCore.Entities.Gouvernorat", "Gouvernorat")
                        .WithMany("ZoneVilles")
                        .HasForeignKey("GouvernoratId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_ZoneVilles_Gouvernorats");

                    b.HasOne("Access.AppCore.Entities.Ville", "Ville")
                        .WithMany("ZoneVilles")
                        .HasForeignKey("VilleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_ZoneVilles_Villes");

                    b.HasOne("Access.AppCore.Entities.Zone", "Zone")
                        .WithMany("ZoneVilles")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_ZoneVilles_Zones");

                    b.Navigation("Cite");

                    b.Navigation("Gouvernorat");

                    b.Navigation("Ville");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("Access.AppCore.Entities.Banque", b =>
                {
                    b.Navigation("Cheques");

                    b.Navigation("Chequiers");
                });

            modelBuilder.Entity("Access.AppCore.Entities.ChequeStatut", b =>
                {
                    b.Navigation("Cheques");
                });

            modelBuilder.Entity("Access.AppCore.Entities.Chequier", b =>
                {
                    b.Navigation("Cheques");
                });

            modelBuilder.Entity("Access.AppCore.Entities.ChequierStatut", b =>
                {
                    b.Navigation("Chequiers");
                });

            modelBuilder.Entity("Access.AppCore.Entities.Cite", b =>
                {
                    b.Navigation("ZoneVilles");
                });

            modelBuilder.Entity("Access.AppCore.Entities.Client", b =>
                {
                    b.Navigation("ClientContacts");

                    b.Navigation("Clients");
                });

            modelBuilder.Entity("Access.AppCore.Entities.ClientType", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("Access.AppCore.Entities.ClientWarehouse", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("Access.AppCore.Entities.Collaborateur", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("SocieteAgences");

                    b.Navigation("SocieteDepartements");
                });

            modelBuilder.Entity("Access.AppCore.Entities.CollaborateurRole", b =>
                {
                    b.Navigation("Collaborateurs");
                });

            modelBuilder.Entity("Access.AppCore.Entities.FacturationCategory", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("Access.AppCore.Entities.Gouvernorat", b =>
                {
                    b.Navigation("Cites");

                    b.Navigation("Villes");

                    b.Navigation("ZoneVilles");
                });

            modelBuilder.Entity("Access.AppCore.Entities.ModesReglementFacturation", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("Access.AppCore.Entities.ModesReglementPaiement", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("Access.AppCore.Entities.Service", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("Access.AppCore.Entities.SocieteAgence", b =>
                {
                    b.Navigation("Collaborateurs");
                });

            modelBuilder.Entity("Access.AppCore.Entities.TaxeType", b =>
                {
                    b.Navigation("Taxes");
                });

            modelBuilder.Entity("Access.AppCore.Entities.Ville", b =>
                {
                    b.Navigation("Cites");

                    b.Navigation("ZoneVilles");
                });

            modelBuilder.Entity("Access.AppCore.Entities.Zone", b =>
                {
                    b.Navigation("ZoneVilles");
                });
#pragma warning restore 612, 618
        }
    }
}
